/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaces;

import classes.Internacao;
import classes.Leito;
import classes.Medico;
import classes.Paciente;
import classes.ProntuarioMedico;
import controles.ControleInternacao;
import controles.ControleLeito;
import controles.ControlePaciente;
import controles.ControleProntuario;
import enums.ServicoProntuario;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Amanda
 */
public class TelaVerificarInternacoes extends javax.swing.JFrame {

    String dataConvertida = "", nomePaciente = "";
    Medico medico;
    DefaultTableModel pacientesInternados;
    ControleInternacao controleInternacao = new ControleInternacao();
    ControleLeito controleLeito = new ControleLeito();
    ControleProntuario controleProntuario = new ControleProntuario();
    ControlePaciente controlePaciente = new ControlePaciente();
    
    /**
     * Creates new form TelaInicialAdministrador
     */
    public TelaVerificarInternacoes(Medico medico){
        initComponents();
        this.setLocationRelativeTo(null);
        this.medico = medico;
        LocalDate hoje = LocalDate.now();
        DateTimeFormatter formataData = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        dataConvertida = hoje.format(formataData);
        
        this.pacientesInternados = (DefaultTableModel) listaPacientes.getModel();
        
        preencherTabela();
        centralizarTextos();
    }
    
    private void preencherTabela(){
        pacientesInternados.setRowCount(0);
        //Recuperar Internações filtrando - idMedico e statusAlta = false
        ArrayList<Internacao> internacoesAtivas = controleInternacao.retornaInternacoesAtivasPorMedico(medico.getId());
        if(internacoesAtivas != null){
            for(Internacao i : internacoesAtivas){
                //Buscar Leito com o idLeito da Internação
                Leito leito = controleLeito.buscaLeitoPorID(i.getIdLeito());
                if(leito != null){
                    //Buscar Prontuário via id salvo na internação (idprontuario)
                    ProntuarioMedico prontuario = controleProntuario.buscaProntuarioPorID(i.getIdProntuario());
                    if(prontuario != null){
                        //Busca Paciente via id salvo no prontuario (idPaciente)
                        Paciente paciente = controlePaciente.buscaPacientePorID(prontuario.getIdPaciente());
                        if(paciente != null){
                            //Adicionar Informações na Tabela
                            pacientesInternados.addRow(new Object[]{
                                paciente.getNome(),
                                leito.getNumero(),
                                prontuario.getDataAtualizacao(),
                                prontuario.getServico()
                            });
                        } else {
                            JOptionPane.showMessageDialog(null, "Paciente não localizado!");
                            break;
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Prontuário não localizado!");
                        break;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Leito não localizado!");
                    break;
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nenhuma internação ativa no momento!");
            novaPrescricao.setEnabled(false);
            realizarAlta.setEnabled(false);
        }
    }
    
    private void centralizarTextos(){
        DefaultTableCellRenderer centralizar = new DefaultTableCellRenderer();
        centralizar.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < listaPacientes.getColumnCount(); i++) {
            listaPacientes.getColumnModel().getColumn(i).setCellRenderer(centralizar);
        }

    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        voltar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaPacientes = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        novaPrescricao = new javax.swing.JButton();
        realizarAlta = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        logout = new javax.swing.JMenuItem();
        sair = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        agendaCompleta = new javax.swing.JMenuItem();
        addNovasDatas = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        solicitacoesInternacao = new javax.swing.JMenuItem();
        verificarInternacoes = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        voltar.setText("Voltar");
        voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarActionPerformed(evt);
            }
        });

        listaPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Paciente", "Leito", "Data", "Serviço"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listaPacientes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        listaPacientes.getTableHeader().setReorderingAllowed(false);
        listaPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaPacientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listaPacientes);
        if (listaPacientes.getColumnModel().getColumnCount() > 0) {
            listaPacientes.getColumnModel().getColumn(0).setResizable(false);
            listaPacientes.getColumnModel().getColumn(0).setPreferredWidth(225);
            listaPacientes.getColumnModel().getColumn(1).setResizable(false);
            listaPacientes.getColumnModel().getColumn(2).setResizable(false);
            listaPacientes.getColumnModel().getColumn(3).setResizable(false);
            listaPacientes.getColumnModel().getColumn(3).setPreferredWidth(200);
        }

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Pacientes Internados");

        novaPrescricao.setText("Nova Prescrição");
        novaPrescricao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novaPrescricaoActionPerformed(evt);
            }
        });

        realizarAlta.setText("Realizar Alta");
        realizarAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realizarAltaActionPerformed(evt);
            }
        });

        jMenu3.setText("Sair");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        jMenu3.add(logout);

        sair.setText("Sair");
        sair.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sairMouseClicked(evt);
            }
        });
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });
        jMenu3.add(sair);

        jMenuBar2.add(jMenu3);

        jMenu1.setText("Minha Agenda");

        agendaCompleta.setText("Agenda Completa");
        agendaCompleta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agendaCompletaActionPerformed(evt);
            }
        });
        jMenu1.add(agendaCompleta);

        addNovasDatas.setText("Adicionar Novas Datas");
        addNovasDatas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNovasDatasActionPerformed(evt);
            }
        });
        jMenu1.add(addNovasDatas);

        jMenuBar2.add(jMenu1);

        jMenu2.setText("Internações");

        solicitacoesInternacao.setText("Solicitações");
        jMenu2.add(solicitacoesInternacao);

        verificarInternacoes.setText("Verificar Internações");
        jMenu2.add(verificarInternacoes);

        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(novaPrescricao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(realizarAlta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(316, 316, 316)
                        .addComponent(voltar)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(novaPrescricao)
                        .addGap(18, 18, 18)
                        .addComponent(realizarAlta)))
                .addGap(18, 18, 18)
                .addComponent(voltar)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarActionPerformed
        // TODO add your handling code here:
        new TelaInicialMedico(medico).setVisible(true);
        dispose();
    }//GEN-LAST:event_voltarActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        new TelaInicial().setVisible(true);
        dispose();
    }//GEN-LAST:event_logoutActionPerformed

    private void sairMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sairMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_sairMouseClicked

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_sairActionPerformed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void agendaCompletaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agendaCompletaActionPerformed
        // TODO add your handling code here:
        new TelaAgendaCompleta(medico).setVisible(true);
        dispose();
    }//GEN-LAST:event_agendaCompletaActionPerformed

    private void addNovasDatasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNovasDatasActionPerformed
        // TODO add your handling code here:
        new TelaCadastroDatasConsultas(medico).setVisible(true);
        dispose();
    }//GEN-LAST:event_addNovasDatasActionPerformed

    private void novaPrescricaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novaPrescricaoActionPerformed
        // TODO add your handling code here:
        
        if(nomePaciente.isEmpty()){
            JOptionPane.showMessageDialog(null, "Nenhum Paciente Selecionado!");
        } else {
            new TelaPrescricaoInternacao(medico, nomePaciente).setVisible(true);
            dispose();
        }
        
    }//GEN-LAST:event_novaPrescricaoActionPerformed

    private void listaPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaPacientesMouseClicked
        // TODO add your handling code here:        
        int linha = listaPacientes.getSelectedRow();
        nomePaciente = String.valueOf(listaPacientes.getValueAt(linha, 0));
        
        System.out.println("Paciente Selecionado -> " + nomePaciente);
    }//GEN-LAST:event_listaPacientesMouseClicked

    private void realizarAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realizarAltaActionPerformed
        // TODO add your handling code here:
        
        if(nomePaciente.isEmpty()){
            JOptionPane.showMessageDialog(null, "Nenhum Paciente Selecionado!");
        } else {
            int resposta = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja realizar a alta do Paciente?"
                    + "\nPaciente: " + nomePaciente, "Realizar Alta", JOptionPane.YES_NO_OPTION);
            if(resposta == JOptionPane.YES_OPTION){
                Paciente paciente = controlePaciente.buscaPacientePorNome(nomePaciente);
                ProntuarioMedico prontuario = controleProntuario.buscaProntuarioPorIDPaciente(paciente.getId());
                Internacao internacao = controleInternacao.retornaInternacaoPorIDProntuario(prontuario.getId());
                Leito leito = controleLeito.buscaLeitoPorID(internacao.getIdLeito());
                
                System.out.println("Dados da internação:");
                System.out.println("Paciente -> " + paciente);
                System.out.println("Prontuário -> " + prontuario);
                System.out.println("Internação -> " + internacao);
                System.out.println("Leito -> " + leito);
                //Alterar Internação - statusAlta para true
                internacao.setStatusAlta(true);
                boolean confirmacao = controleInternacao.realizarAlta(internacao);
                if(confirmacao){
                    //Alterar Leito - diminuir dos internados e se for igual a capacidade for igual ao internados, mudar status para DisponibilidadeLeito.UM
                    leito.setInternados(leito.getInternados() - 1);
                    leito.setStatus(0);
                    confirmacao = controleLeito.atualizarLeito(leito);
                    if(confirmacao){
                        //Atualizar Prontuário - dataAtualizacao com a Data Atual e serviço para ServicoProntuario.CINCO
                        prontuario.setDataAtualizacao(dataConvertida);
                        prontuario.setServico(ServicoProntuario.CINCO.getServico());
                        confirmacao = controleProntuario.atualizacaoPronturario(prontuario);
                        if(confirmacao){
                            JOptionPane.showMessageDialog(null, "Alta do Paciente realizada!");
                            preencherTabela();
                        } else {
                            JOptionPane.showMessageDialog(null, "Ops! Algo deu errado!");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Ops! Algo deu errado!");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Ops! Algo deu errado!");
                }
                
                
                System.out.println("Dados da internação Após Atualização:");
                System.out.println("Paciente -> " + paciente);
                System.out.println("Prontuário -> " + prontuario);
                System.out.println("Internação -> " + internacao);
                System.out.println("Leito -> " + leito);
            }
        }
        
    }//GEN-LAST:event_realizarAltaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addNovasDatas;
    private javax.swing.JMenuItem agendaCompleta;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable listaPacientes;
    private javax.swing.JMenuItem logout;
    private javax.swing.JButton novaPrescricao;
    private javax.swing.JButton realizarAlta;
    private javax.swing.JMenuItem sair;
    private javax.swing.JMenuItem solicitacoesInternacao;
    private javax.swing.JMenuItem verificarInternacoes;
    private javax.swing.JButton voltar;
    // End of variables declaration//GEN-END:variables
}
